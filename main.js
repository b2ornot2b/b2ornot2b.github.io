// Generated by CoffeeScript 1.9.2
var n;

window.offerClicked = function(event) {
  var content, url;
  console.log('offerClicked', event);
  url = document.querySelector('#url').value.trim();
  content = document.querySelector('#data').value.trim();
  console.log('url', url, data);
  window.sworker({
    command: 'keys'
  }).then(function(data) {
    return console.log('keys', data);
  });
  if (url.length !== 0) {
    console.log(url, data);
    return window.sworker({
      command: 'add',
      url: url,
      content: content.length === 0 ? null : content
    }).then(function(data) {
      return console.log('add', url, content, data);
    });
  }
};

window.rooms = {};

window.connectRoom = function(room, onPeer, onMessage) {
  var conf, context;
  context = {
    'room': room,
    'onPeer': onPeer,
    'onMessage': onMessage,
    peers: []
  };
  context.send = function(msg, peerAttrs) {
    var i, k, len, peer, ref, results, v;
    console.log('0 send', context.peers.length);
    context.peers = (function() {
      var i, len, ref, results;
      ref = context.peers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        peer = ref[i];
        if (peer.channel.readyState !== 'closed') {
          results.push(peer);
        }
      }
      return results;
    })();
    console.log('1 send', context.peers.length);
    ref = context.peers;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      peer = ref[i];
      if (peer.channel.readyState === 'open') {
        if (typeof peerAttrs !== 'undefined') {
          results.push((function() {
            var results1;
            results1 = [];
            for (k in peerAttrs) {
              v = peerAttrs[k];
              console.log('send peerAttrs', msg, peer, k, v);
              if (peer.meta[k] === v) {
                console.log('sending message', msg, peer);
                results1.push(peer.channel.send(msg));
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          })());
        } else {
          results.push(peer.channel.send(msg));
        }
      }
    }
    return results;
  };
  conf = RTC({
    'room': room,
    'signaller': 'http://128.199.127.220:8997',
    'constraints': null,
    'channels': {
      'chat': true
    },
    'ice': [
      {
        url: 'stun:stun1.l.google.com:19302'
      }, {
        url: 'stun:stun2.l.google.com:19302'
      }, {
        url: 'stun:stun3.l.google.com:19302'
      }, {
        url: 'stun:stun4.l.google.com:19302'
      }
    ]
  });
  conf.on('channel:opened:chat', function(id, channel, attributes, connection) {
    var peerInfo;
    console.log('channel:opened:chat', id, channel, attributes, connection);
    peerInfo = {
      id: id,
      channel: channel,
      browser: {
        name: attributes.browser,
        version: attributes.browserVersion
      },
      signaller: attributes.signaller
    };
    channel.onmessage = function(event) {
      return context.onMessage(event.data, peerInfo);
    };
    peerInfo.meta = context.onPeer.apply(context);
    return context.peers.push(peerInfo);
  });
  return context;
};

window.rooms.test = window.connectRoom('b2ornot2b:test', function(id) {
  return console.log('onPeer', this);
}, function(msg, peer) {
  return console.log('onMessage', this, msg, peer);
});

if (navigator.serviceWorker) {
  n = navigator.serviceWorker.register('service-worker.js', {
    scope: './'
  }).then(function() {
    if (navigator.serviceWorker.controller) {
      return console.log('The service worker is currently handling network operations.');
    } else {
      console.log('Please reload this page to allow the service worker to handle network operations.');
      return location.reload();
    }
  });
  n["catch"](function(error) {
    return console.log(error);
  });
} else {
  console.log('Service worker unavailable');
}

window.sendWorker = function(msg) {
  return new Promise(function(resolve, reject) {
    var channel;
    channel = new MessageChannel();
    console.log('promise');
    channel.port1.onmessage = function(event) {
      console.log('onmessage', event);
      if (event.data.error) {
        return reject(event.data.error);
      } else {
        return resolve(event.data);
      }
    };
    return navigator.serviceWorker.controller.postMessage(msg, [channel.port2]);
  });
};

window.loadSharedWorker = function(name) {
  var worker;
  worker = new SharedWorker(name + '.js');
  worker.port.addEventListener('message', function(event) {
    return console.log('SharedWorker ', name, '>>', event.data);
  }, false);
  worker.port.start();
  return worker.port.postMessage({
    'command': 'init',
    'name': name
  });
};

window.loadSharedWorker('jsworker');

//# sourceMappingURL=main.js.map
