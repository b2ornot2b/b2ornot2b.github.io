// Generated by CoffeeScript 1.9.2
var WTFWebRTC;

WTFWebRTC = function(webrtc) {
  var answer, context, dataChannelSettings, dataChannels, doCreateAnswer, doHandleDataChannels, doHandleError, doSetLocalDesc, doShowAnswer, inputLoop, makeDataChannel, offer, oniceconnectionstatechange, onicegatheringstatechange, onsignalingstatechange, pc, pcSettings, pendingDataChannels;
  context = {
    send: function(data) {
      return data;
    }
  };
  if (typeof webrtc === 'undefined') {
    webrtc = window;
  }
  pc = null;
  offer = null;
  answer = null;

  /* 1. Global settings, data and functions. */
  dataChannelSettings = {
    'reliable': {
      ordered: true,
      maxRetransmits: 0
    }
  };
  pcSettings = [
    {
      iceServers: [
        {
          url: 'stun:stun.l.google.com:19302'
        }
      ]
    }, {
      'optional': [
        {
          DtlsSrtpKeyAgreement: false
        }
      ]
    }
  ];
  pendingDataChannels = {};
  dataChannels = {};

  /* 2. This code deals with the --join case. */
  doHandleError = function(error) {
    throw error;
  };
  onsignalingstatechange = function(event) {
    console.info('signaling state change:', event.target);
  };
  oniceconnectionstatechange = function(event) {
    console.info('ice connection state change:', event.target);
  };
  onicegatheringstatechange = function(event) {
    console.info('ice gathering state change:', event.target);
  };
  inputLoop = function(channel) {
    console.log('inputLoop', channel);
    context.channel = channel;
  };
  doShowAnswer = function() {
    answer = pc.localDescription;
    console.log('\n\nHere is your answer:');
    return JSON.stringify(answer.toJSON());
  };
  doCreateAnswer = function() {
    pc.createAnswer(doSetLocalDesc, doHandleError);
  };
  doSetLocalDesc = function(desc) {
    answer = desc;
    pc.setLocalDescription(desc, void 0, doHandleError);
  };
  doHandleDataChannels = function() {
    var labels;
    labels = Object.keys(dataChannelSettings);
    pc.ondatachannel = function(evt) {
      var channel, label;
      channel = evt.channel;
      label = channel.label;
      pendingDataChannels[label] = channel;
      channel.onopen = function() {
        dataChannels[label] = channel;
        delete pendingDataChannels[label];
        if (Object.keys(dataChannels).length === labels.length) {
          console.log('\nConnected!');
          if (context.onConnected) {
            context.onConnected;
          }
          inputLoop(channel);
        }
      };
      channel.onmessage = function(evt) {
        var data;
        console.log('onMessage peer', evt.data);
        data = JSON.parse(evt.data);
        console.log(data);
        if (context.onMessage) {
          context.onMessage(data);
        }
        inputLoop(channel);
      };
      channel.onerror = doHandleError;
    };
    pc.setRemoteDescription(offer, doCreateAnswer, doHandleError);
  };
  makeDataChannel = function() {
    var channel;
    channel = pc.createDataChannel('test', {
      reliable: true
    });
    channel.onopen = function() {
      console.log('\nConnected!');
      if (context.onConnected) {
        context.onConnected(channel);
      }
      inputLoop(channel);
    };
    channel.onmessage = function(evt) {
      var data;
      console.log('onmessage', evt.data);
      data = JSON.parse(evt.data);
      console.log(data);
      if (context.onMessage) {
        context.onMessage(data);
      }
      inputLoop(channel);
    };
    channel.onerror = doHandleError;
  };
  context.getOffer = function(pastedOffer, success) {
    var data;
    data = JSON.parse(pastedOffer);
    offer = new webrtc.RTCSessionDescription(data);
    answer = null;
    pc = new webrtc.RTCPeerConnection(pcSettings[0]);
    pc.onsignalingstatechange = onsignalingstatechange;
    pc.oniceconnectionstatechange = oniceconnectionstatechange;
    pc.onicegatheringstatechange = onicegatheringstatechange;
    pc.onicecandidate = function(candidate) {
      var ans;
      if (candidate.candidate === null) {
        console.log(pc.localDescription);
        ans = doShowAnswer();
        console.log(JSON.stringify(ans) + '\n\n');
        if (success) {
          success(ans);
        }
      }
    };
    doHandleDataChannels();
  };

  /* 3. From here on down deals with the --create case. */
  context.makeOffer = function(success) {
    pc = new webrtc.RTCPeerConnection(pcSettings[0]);
    makeDataChannel();
    pc.onsignalingstatechange = onsignalingstatechange;
    pc.oniceconnectionstatechange = oniceconnectionstatechange;
    pc.onicegatheringstatechange = onicegatheringstatechange;
    pc.createOffer(function(desc) {
      pc.setLocalDescription(desc, function() {});
    });
    pc.onicecandidate = function(candidate) {
      var offerText;
      if (candidate.candidate === null) {
        console.log('Your offer is:');
        offerText = JSON.stringify(pc.localDescription);
        console.log(JSON.stringify(offerText));
        if (success) {
          success(offerText);
        }
      }
    };
  };
  context.getAnswer = function(pastedAnswer) {
    var data;
    data = typeof pastedAnswer === 'object' ? pastedAnswer : JSON.parse(pastedAnswer);
    answer = new webrtc.RTCSessionDescription(data);
    pc.setRemoteDescription(answer);
  };
  return context;
};

if (typeof module !== "undefined" && module !== null) {
  module.exports = WTFWebRTC;
}

//# sourceMappingURL=wtf-webrtc.js.map
